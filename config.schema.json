{
    "pluginAlias": "nxtlevel",
    "pluginType": "accessory",
    "schema": {
        "type": "object",
        "properties": {
            "type": {
                "type": "string",
                "title": "Type",
                "description": "Select the accessory type.",
                "placeholder": "lightbulb",
                "oneOf": [
                    {
                        "title": "Security System",
                        "enum": [
                            "securitySystem"
                        ]
                    }
                ]
            },
            "name": {
                "type": "string",
                "minLength": 1,
                "required": true,
                "title": "Name",
                "description": "Name of accessory, as displayed in HomeKit."
            },
            "url": {
                "type": "string",
                "title": "URL",
                "description": "URL of MQTT server (optional), default: mqtt://localhost:1883, Please change to app.nxtfox.com:18883",
                "placeholder": "app.nxtfox.com:18883",
                "value": "app.nxtfox.com:18883"
            },
            "username": {
                "type": "string",
                "required": false,
                "title": "Username",
                "description": "Username for MQTT server (optional)"
            },
            "password": {
                "type": "string",
                "required": false,
                "title": "Password",
                "description": "Password for MQTT server (optional)"
            },
            "IMEInr": {
                "type": "string",
                "required": true,
                "title": "IMEI nr",
                "description": "IMEI nr from NXTFOX unit that corresponds with the NXTLEVEL APP"
            },
            "mqttOptions": {
                "type": "object",
                "title": "MQTT Options",
                "properties": {
                    "keepalive": {
                        "type": "integer",
                        "title": "Keep Alive",
                        "description": "Keep alive interval (seconds), or 0 to disable",
                        "placeholder": 0
                    }
                }
            },
            "mqttPubOptions": {
                "type": "object",
                "title": "MQTT Publish Options",
                "properties": {
                    "retain": {
                        "type": "boolean",
                        "title": "Retain",
                        "description": "Publishing - set Retain flag"
                    }
                }
            },
            "logMqtt": {
                "type": "boolean",
                "readOnly": false,
                "writeOnly": false,
                "title": "Log MQTT",
                "description": "Set to true to enable MQTT logging for this accessory"
            },
            "codec": {
                "type": "string",
                "title": "Codec",
                "description": "Filename of JavaScript file implementing codec"
            },
            "debounceRecvms": {
                "type": "integer",
                "title": "Receive Debounce (ms)",
                "description": "Whenever receiving a message on any configured topic, wait for the number of milliseconds specified before notifying Homekit. If a subsequent message is received during the debounce period, the debounce timer is restarted. This can be useful to filter extraneous notification messages from accessories."
            },
            "topics": {
                "type": "object",
                "title": "Topics",
                "properties": {
                    "getOnline": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel of 'online' status",
                        "placeholder": "on/",
                        "value": "on/"
                    },
                    "setTargetState": {
                        "type": "string",
                        "description": "Topic published by nxtlevel to control 'target alarm state'",
                        "placeholder": "control/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "control/"
                        }
                    },
                    "getTargetState": {
                        "type": "string",
                        "description": "Topic that may be published to notify HomeKit that the target alarm state has been changed externally.",
                        "placeholder": "stat/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "stat/"
                        }
                    },
                    "getCurrentState": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel that an alarm state has been achieved. HomeKit will expect current state to end up matching target state.",
                        "placeholder": "alarm/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "alarm/"
                        }
                    },
                    "getName": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel of 'name' (optional, rarely-used)"
                    },
                    "getStatusFault": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel of 'status fault'",
                        "placeholder": "fault/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "fault/"
                        }
                    },
                    "getStatusLowBattery": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel of 'status low battery'",
                        "placeholder": "low_bat/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "low_bat/"
                        }
                    },
                    "getBatteryLevel": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel of 'battery level'",
                        "placeholder": "bat/lvl/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "bat/lvl/"
                        }
                    },
                    "getChargingState": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel of 'AC fail'",
                        "placeholder": "ac/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "ac/"
                        }
                    },
                    "getStatusTampered": {
                        "type": "string",
                        "description": "Topic used to notify nxtlevel of 'status tampered'",
                        "placeholder": "tamp/",
                        "condition": {
                            "functionBody": "return ['securitySystem'].includes(model.type);",
                            "value": "tamp/"
                        }
                    }
                }
            },
            "startPub": {
                "type": "array",
                "title": "Topic",
                "items": {
                    "title": "Publish",
                    "type": "object",
                    "description": "publish",
                    "properties": {
                        "topic": {
                            "type": "string",
                            "title": "Topic",
                            "description": "MQTT Topic"
                        },
                        "message": {
                            "type": "string",
                            "title": "Message",
                            "description": "Message"
                        }
                    }
                }
            },
            "onlineValue": {
                "type": "string",
                "title": "Online Value",
                "description": "Value representing that an accessory is online (as received through 'getOnline') if different to 'onValue'",
                "default": "",
                "examples": [
                    "Online"
                ]
            },
            "offlineValue": {
                "type": "string",
                "title": "Offline Value",
                "description": "Value representing that an accessory is offline (as received through 'getOnline') if different to 'offValue'",
                "default": "",
                "examples": [
                    "Offline"
                ]
            },
            "chargingStateValues": {
                "type": "array",
                "minContains": 1,
                "title": "Charging State Values",
                "description": "An explanation about the purpose of this instance.",
                "items": {
                    "type": "string",
                    "title": "Items",
                    "description": "An explanation about the purpose of this instance.",
                    "placeholder": "NotCharging, Charging, or NotChargeable"
                },
                "condition": {
                    "functionBody": "return ['securitySystem'].includes(model.type);"
                }
            },
            "confirmationPeriodms": {
                "type": "integer",
                "title": "Confirmation Period (ms)",
                "description": "In order to monitor accessory responsiveness automatically, enter the time (in milliseconds) to wait after publishing a 'set' topic to receive a confirmatary 'get' topic update. The accessory must echo messages it receives through the 'setOn' subject to the 'getOn' subject, otherwise homebridge-nxtlevel will mark it as unresponsive and republish on the 'setOn' subject.",
                "placeholder": 1000
            },
            "retryLimit": {
                "type": "integer",
                "title": "Confirmation Retry Limit",
                "description": "When using confirmation period, configure the number of publishing retries attempted by homebrige-nxtlevel when no confirmatory 'get' topic update is received.",
                "placeholder": 3
            },
            "confirmationIndicateOffline": {
                "type": "boolean",
                "title": "Confirmation Indicate Offline",
                "description": "Indicate offline ('No Response') when confirmation message not received"
            }
        }
    },
    "layout": [
        "type",
        {
            "key": "name",
            "condition": {
                "functionBody": "return model.type && model.type !== 'null';"
            }
        },
        {
            "type": "fieldset",
            "expandable": true,
            "title": "MQTT Settings",
            "condition": {
                "functionBody": "return model.type && model.type !== 'null';"
            },
            "items": [
                "url",
                "username",
                "password",
                "IMEInr",
                "logMqtt",
                "mqttOptions.keepalive",
                "mqttPubOptions.retain",
                "codec",
                "debounceRecvms"
            ]
        },
        {
            "type": "fieldset",
            "expandable": true,
            "title": "MQTT Topics",
            "condition": {
                "functionBody": "return model.type && model.type !== 'null';"
            },
            "items": [
                "topics.getBatteryLevel",
                "topics.getStatusLowBattery",
                "topics.getChargingState",
                "topics.getStatusTampered",
                "topics.getCurrentState",
                "topics.getStatusFault",
                "topics.getTargetState",
                "topics.setTargetState",
                "topics.getOnline"
            ]
        },
        {
            "type": "fieldset",
            "expandable": true,
            "title": "Advanced",
            "items": [
                "onValue",
                "offValue",
                "confirmationPeriodms",
                "retryLimit",
                "confirmationIndicateOffline",
                "onlineValue",
                "offlineValue",
                {
                    "key": "inputs",
                    "type": "array",
                    "items": [
                        {
                            "type": "div",
                            "displayFlex": true,
                            "flex-direction": "row",
                            "items": [
                                {
                                    "key": "inputs[].name",
                                    "flex": "1 1 50px",
                                    "notitle": true,
                                    "placeholder": "Input Name"
                                },
                                {
                                    "key": "inputs[].value",
                                    "flex": "1 1 50px",
                                    "notitle": true,
                                    "placeholder": "Input Value"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "help",
                    "helpvalue": "<strong>MQTT topics to publish on start-up</strong>"
                },
                {
                    "key": "startPub",
                    "type": "array",
                    "title": "Topic",
                    "expandable": false,
                    "notitle": true,
                    "items": [
                        {
                            "type": "div",
                            "displayFlex": true,
                            "flex-direction": "row",
                            "items": [
                                {
                                    "key": "startPub[].topic",
                                    "flex": "1 1 50px",
                                    "notitle": true,
                                    "placeholder": "Topic"
                                },
                                {
                                    "key": "startPub[].message",
                                    "flex": "1 1 50px",
                                    "notitle": true,
                                    "placeholder": "Message"
                                }
                            ]
                        }
                    ]
                },
                "topics.getName"
            ]
        }
    ]
}